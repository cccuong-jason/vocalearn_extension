{"version":3,"file":"content.js","mappings":";;;;;;;;;;;;;;;AAAA;AACsD;AAC/C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,+DAAU;AACtB;AACA,8BAA8B,yCAAyC;AACvE;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,YAAY,+DAAU,qBAAqB,mBAAmB;AAC9D;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,YAAY,+DAAU,qBAAqB,4BAA4B;AACvE;AACA,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA,iEAAe,UAAU,EAAC;;;;;;;UCJ1B;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACNA;AACkD;AAC4B;AACvE;AACP;AACA;AACA;AACA,IAAI,+DAAU;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,uFAAoB;AAClD;AACA;AACA;AACA,mCAAmC,+DAAU;AAC7C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAU;AACrC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://vocalearn-extension/./src/infra/services/configuration-service.ts","webpack://vocalearn-extension/./src/utils/browser-polyfill.ts","webpack://vocalearn-extension/webpack/bootstrap","webpack://vocalearn-extension/webpack/runtime/define property getters","webpack://vocalearn-extension/webpack/runtime/hasOwnProperty shorthand","webpack://vocalearn-extension/webpack/runtime/make namespace object","webpack://vocalearn-extension/./src/content.ts"],"sourcesContent":["// src/infrastructure/services/configuration-service.ts\nimport browserAPI from '../../utils/browser-polyfill';\nexport class ConfigurationService {\n    constructor() {\n        this.defaultConfig = {\n            targetLanguages: ['es', 'fr', 'de'],\n            autoPopup: true,\n            includeDefinitions: true,\n            translationService: 'libre_translate',\n            dictionaryService: 'free_dictionary',\n            theme: 'system'\n        };\n    }\n    static getInstance() {\n        if (!ConfigurationService.instance) {\n            ConfigurationService.instance = new ConfigurationService();\n        }\n        return ConfigurationService.instance;\n    }\n    async getConfig() {\n        return new Promise((resolve) => {\n            browserAPI.storage.local.get(['config'], (result) => {\n                if (result.config) {\n                    resolve({ ...this.defaultConfig, ...result.config });\n                }\n                else {\n                    resolve(this.defaultConfig);\n                }\n            });\n        });\n    }\n    async updateConfig(config) {\n        const currentConfig = await this.getConfig();\n        const newConfig = { ...currentConfig, ...config };\n        return new Promise((resolve) => {\n            browserAPI.storage.local.set({ config: newConfig }, () => {\n                resolve(newConfig);\n            });\n        });\n    }\n    async resetConfig() {\n        return new Promise((resolve) => {\n            browserAPI.storage.local.set({ config: this.defaultConfig }, () => {\n                resolve(this.defaultConfig);\n            });\n        });\n    }\n}\n","// This polyfill ensures compatibility between Chrome and Firefox extension APIs\n// The 'browser' object is used in Firefox extensions while 'chrome' is used in Chrome extensions\n// Use browser if available (Firefox), otherwise use chrome (Chrome, Edge)\nconst browserAPI = (typeof browser !== 'undefined' ? browser : chrome);\nexport default browserAPI;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// src/content.ts\nimport browserAPI from './utils/browser-polyfill';\nimport { ConfigurationService } from './infra/services/configuration-service';\nexport function setupContentScript() {\n    // Listen for text selection\n    document.addEventListener('mouseup', handleTextSelection);\n    // Listen for messages from background script\n    browserAPI.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        if (message.action === 'translateSelection' && message.text) {\n            handleTranslateSelection(message.text);\n        }\n        return false;\n    });\n}\nasync function handleTextSelection(e) {\n    const selection = window.getSelection();\n    const selectedText = selection?.toString().trim() || '';\n    if (selectedText.length > 0 && selectedText.length < 100) {\n        // Check if auto-popup is enabled\n        const configService = ConfigurationService.getInstance();\n        const config = await configService.getConfig();\n        if (config.autoPopup) {\n            // Get translation and show popup\n            const response = await browserAPI.runtime.sendMessage({\n                action: 'getTranslation',\n                text: selectedText\n            });\n            if (response && (response.translations || response.definition)) {\n                showPopup(e.pageX, e.pageY, selectedText, response);\n            }\n        }\n    }\n}\nasync function handleTranslateSelection(text) {\n    const response = await browserAPI.runtime.sendMessage({\n        action: 'getTranslation',\n        text: text\n    });\n    if (response && (response.translations || response.definition)) {\n        const selection = window.getSelection();\n        const range = selection?.getRangeAt(0);\n        const rect = range?.getBoundingClientRect();\n        if (rect) {\n            showPopup(rect.left + window.scrollX, rect.bottom + window.scrollY, text, response);\n        }\n    }\n}\nfunction showPopup(x, y, word, data) {\n    // Implementation of popup UI\n    // This can be extracted into a UI component class\n    // ...\n}\n// Initialize the content script\nsetupContentScript();\n"],"names":[],"sourceRoot":""}